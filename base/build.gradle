/*
 * Copyright 2020, {{App}}
 * Licensed under the Apache License, Version 2.0, "{{App}} Inc".
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply from: '../deps.gradle'
apply plugin: 'com.apollographql.apollo'

android {
    compileSdkVersion versions.compileSdk
    buildToolsVersion versions.buildTools
    defaultConfig {
        minSdkVersion versions.minSdk
        targetSdkVersion versions.targetSdk
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        buildConfigField("String", "API_URL", "\"http://394712cf.ngrok.io/\"")
        buildConfigField("String", "API_URL_SOCKET", "\"ws://394712cf.ngrok.io/\"")

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [
                        "room.schemaLocation"  : "$projectDir/schemas".toString(),
                        "room.incremental"     : "true",
                        "room.expandProjection": "true"]
            }
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
}

apollo {
    customTypeMapping = [
            "Date" : "java.util.Date",
            "URL" : "java.lang.String"
    ]
    generateKotlinModels.set(true) // or false for Java models
}

dependencies {
    implementation project(path: ':common')
    api project(path: ':domain')
    implementation deps.apollo
    implementation deps.appcompat
    implementation deps.dagger
    kapt deps.daggerCompiler
    debugImplementation deps.facebookStetho
    debugImplementation deps.facebookStethoOkHttp
    implementation deps.kotlin
    implementation deps.jodaTime
    testImplementation deps.junit
    implementation deps.lifeCycleReactiveStreams
    implementation deps.okHttpInterceptor
    debugImplementation deps.okHttpMockWebServer
    testImplementation deps.mockito
    testImplementation deps.mockitoCore
    implementation deps.multidex
    implementation deps.preferences
    implementation deps.promiseCommons
    implementation deps.promiseDatabase
    implementation deps.promiseModel
    androidTestImplementation deps.testRunner
    implementation deps.trueTime
    implementation deps.androidxCore
    implementation deps.lifeCycleExtensions
    implementation deps.retrofit
    implementation deps.retrofitAdapterRxJava
    implementation deps.retrofitConverterGson
    kapt deps.roomCompiler
    implementation deps.room
    implementation deps.roomRuntime
    implementation deps.roomRxJava
    implementation deps.rxAndroid
    implementation deps.rxJava
}

repositories {
    mavenCentral()
    jcenter()
}

